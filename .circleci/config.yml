version: 2

## Build conditions
# Build in any branch or tag
build_always: &build_always
  filters:
    tags:
      only: /^v.*/
# Build only in master or in tags
build_on_master: &build_on_master
  filters:
    tags:
      only: /^v.*/
    branches:
      only: master
# Build only in tags (release)
build_on_tag: &build_on_tag
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

workflows:
  version: 2
  kubeapps:
    jobs:
      - test_go:
          <<: *build_always
      - test_dashboard:
          <<: *build_always
      - test_chart_render:
          <<: *build_always
      - build_go_images:
          <<: *build_always
      - build_dashboard:
          <<: *build_always
      - local_e2e_tests_mongodb_helm2:
          <<: *build_always
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - local_e2e_tests_postgresql_helm2:
          <<: *build_always
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - local_e2e_tests_mongodb_helm3:
          <<: *build_always
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - local_e2e_tests_postgresql_helm3:
          <<: *build_always
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - GKE_1_15_MASTER:
          <<: *build_on_master
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - GKE_1_15_LATEST_RELEASE:
          <<: *build_on_master
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - GKE_1_14_MASTER:
          <<: *build_on_master
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - GKE_1_14_LATEST_RELEASE:
          <<: *build_on_master
          requires:
            - test_go
            - test_dashboard
            - build_go_images
            - build_dashboard
      - sync_chart:
          <<: *build_on_master
          requires:
            - local_e2e_tests_postgresql_helm2
            - local_e2e_tests_postgresql_helm3
            - local_e2e_tests_mongodb_helm2
            - local_e2e_tests_mongodb_helm3
            - GKE_1_15_MASTER
            - GKE_1_15_LATEST_RELEASE
            - GKE_1_14_MASTER
            - GKE_1_14_LATEST_RELEASE
      - push_images:
          <<: *build_on_master
          requires:
            - local_e2e_tests_postgresql_helm2
            - local_e2e_tests_postgresql_helm3
            - local_e2e_tests_mongodb_helm2
            - local_e2e_tests_mongodb_helm3
            - GKE_1_15_MASTER
            - GKE_1_15_LATEST_RELEASE
            - GKE_1_14_MASTER
            - GKE_1_14_LATEST_RELEASE
      - release:
          <<: *build_on_tag
          requires:
            - local_e2e_tests_postgresql_helm2
            - local_e2e_tests_postgresql_helm3
            - local_e2e_tests_mongodb_helm2
            - local_e2e_tests_mongodb_helm3
            - GKE_1_15_MASTER
            - GKE_1_15_LATEST_RELEASE
            - GKE_1_14_MASTER
            - GKE_1_14_LATEST_RELEASE

## Definitions
install_gcloud_sdk: &install_gcloud_sdk
  run: |
    echo "export PATH=$PATH:${HOME}/google-cloud-sdk/bin" >> $BASH_ENV
    echo "export CLOUDSDK_CORE_DISABLE_PROMPTS=1" >> $BASH_ENV
    if [ ! -d ${HOME}/google-cloud-sdk/bin ]; then
      rm -rf $HOME/google-cloud-sdk;
      curl https://sdk.cloud.google.com | bash;
    fi
install_helm_cli: &install_helm_cli
  run: |
    wget https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
    tar zxf helm-$HELM_VERSION-linux-amd64.tar.gz
    sudo mv linux-amd64/helm /usr/local/bin/
exports: &exports
  run: |
    # It is not possible to resolve env vars in the environment section:
    # https://circleci.com/docs/2.0/env-vars/#using-bash_env-to-set-environment-variables
    # DEV_TAG and PROD_TAG are the tags used for the Kubeapps docker images
    echo "export DEV_TAG=build-${CIRCLE_SHA1}" >> $BASH_ENV
    echo "export PROD_TAG=${CIRCLE_TAG:-latest}" >> $BASH_ENV
    # Apart from using a DEV_TAG we use a different image ID to avoid polluting the tag
    # history of the production tag
    echo "export IMG_MODIFIER=-ci" >> $BASH_ENV
build_images: &build_images
  steps:
    - setup_remote_docker:
        version: 18.09.3
    - checkout
    - <<: *exports
    - run: |
        mkdir -p images/
        read -ra IMG_ARRAY <<< "$IMAGES"
        if [[ -n "${CIRCLE_TAG}" ]]; then
          makeArgs="VERSION=${CIRCLE_TAG}"
        fi
        for IMAGE in "${IMG_ARRAY[@]}"; do
          make IMG_MODIFIER="$IMG_MODIFIER" IMAGE_TAG="${DEV_TAG}" $makeArgs kubeapps/${IMAGE}
          if [[ -n "${DOCKER_USERNAME}" && -n "${DOCKER_PASSWORD}" ]]; then
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            docker push kubeapps/${IMAGE}${IMG_MODIFIER}:${DEV_TAG}
          fi
          docker save kubeapps/${IMAGE}${IMG_MODIFIER}:${DEV_TAG} > images/${IMAGE}${IMG_MODIFIER}:${DEV_TAG}
        done
    - persist_to_workspace:
        root: images
        paths:
          - "*"
install_kubectl: &install_kubectl
  run: |
    curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl
run_e2e_tests: &run_e2e_tests
  run: |
    # If we want to test the latest version instead we override the image to be used
    if [[ -n "$TEST_LATEST_RELEASE" ]]; then
      source ./script/chart_sync_utils.sh
      latest=$(latestReleaseTag)
      DEV_TAG=${latest/v/}
      IMG_MODIFIER=""
    fi
    if ./script/e2e-test.sh $DEV_TAG $IMG_MODIFIER; then
      # Test success
      echo "export TEST_RESULT=$?" >> $BASH_ENV
    else
      # Test failed
      echo "export TEST_RESULT=$?" >> $BASH_ENV
    fi
gke_test: &gke_test
  docker:
    - image: circleci/golang:1.13
  steps:
    - checkout
    - run: |
        source ./script/chart_sync_utils.sh

        # In case of GKE we will only want to build if it is
        # a build of a branch in the kubeapps repository
        if [[ -z "$GKE_ADMIN" ]]; then
          echo "Step aborted, we are not in the Kubeapps repository"
          circleci step halt
        fi

        # Cancel job if this is a test stable release job but
        # the chart version has not been bumped
        if [[ -n "$TEST_LATEST_RELEASE" ]] && ! changedVersion; then
          echo "Step aborted, we are not releasing a new version of the chart"
          circleci step halt
        fi
    - <<: *exports
    - <<: *install_gcloud_sdk
    - setup_remote_docker
    - run: |
        gcloud -q config set project $GKE_PROJECT
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/client_secrets.json
        echo $GCLOUD_KEY > $GOOGLE_APPLICATION_CREDENTIALS
        if [ -a $GOOGLE_APPLICATION_CREDENTIALS ]; then
          gcloud -q auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS;
        fi
    - <<: *install_kubectl
    # A GKE cluster name cannot contain non-alphanumeric characters (nor uppercase letters)
    - run: echo "export ESCAPED_GKE_CLUSTER=$(echo ${GKE_CLUSTER}-${CIRCLE_BRANCH:-$CIRCLE_TAG}-${TEST_LATEST_RELEASE}-${GKE_BRANCH}-ci | sed 's/[^a-z0-9-]//g')" >> $BASH_ENV
    - run: ./script/start-gke-env.sh $ESCAPED_GKE_CLUSTER $GKE_ZONE $GKE_BRANCH $GKE_ADMIN > /dev/null
    # Install helm
    - <<: *install_helm_cli
    - <<: *run_e2e_tests
    - store_artifacts:
        path: integration/reports
    - run: exit $TEST_RESULT
    - run:
        name: Cleanup GKE Cluster
        command: gcloud container clusters delete --async --zone $GKE_ZONE $ESCAPED_GKE_CLUSTER
        when: always
local_e2e_steps: &local_e2e_steps
  steps:
    - checkout
    - <<: *exports
    # Install kind
    - run: |
        curl -LO https://github.com/kubernetes-sigs/kind/releases/download/v0.7.0/kind-Linux-amd64
        chmod +x kind-Linux-amd64
        sudo mv kind-Linux-amd64 /usr/local/bin/kind
    - run: kind create cluster
    - run: echo "export KUBECONFIG=$(kind get kubeconfig-path --name=kind)" >> $BASH_ENV
    - <<: *install_kubectl
    - <<: *install_helm_cli
    # Load images from other jobs
    - attach_workspace:
        at: /tmp/images
    - run: for image in /tmp/images/*; do kind load image-archive "$image"; done
    - <<: *run_e2e_tests
    - store_artifacts:
        path: integration/reports
    - run: exit $TEST_RESULT
###

jobs:
  test_go:
    working_directory: /go/src/github.com/kubeapps/kubeapps
    environment:
      CGO_ENABLED: "0"
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - <<: *exports
      - run: make test
      - setup_remote_docker
      # Integration tests for DB
      - run: |
          docker run -d --name postgresql --rm --publish 5432:5432 -e ALLOW_EMPTY_PASSWORD=yes bitnami/postgresql:11.6.0-debian-9-r0
          docker run --network container:postgresql -d --name tests circleci/golang:1.13 tail -f /dev/null
          docker cp /go tests:/
          docker exec -it tests /bin/sh -c "cd /go/src/github.com/kubeapps/kubeapps/ && make test-db"
  test_dashboard:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - run: yarn install --cwd=dashboard --frozen-lockfile
      - run: yarn --cwd=dashboard run lint
      - run: yarn --cwd=dashboard run test --maxWorkers=4 --coverage
  test_chart_render:
    environment:
      HELM_VERSION: "v3.0.2"
    docker:
      - image: circleci/golang:1.13
    steps:
      - <<: *exports
      - checkout
      - <<: *install_helm_cli
      - run: ./script/chart-template-test.sh
  build_go_images:
    docker:
      - image: circleci/golang:1.13
    working_directory: /go/src/github.com/kubeapps/kubeapps
    environment:
      GOPATH: /home/circleci/.go_workspace
      IMAGES: "kubeops apprepository-controller tiller-proxy asset-syncer assetsvc"
    <<: *build_images
  build_dashboard:
    docker:
      - image: circleci/golang:1.13
    environment:
      IMAGES: "dashboard"
    <<: *build_images
  release:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - run: REPO_DOMAIN=kubeapps REPO_NAME=kubeapps ./script/create_release.sh ${CIRCLE_TAG}
  local_e2e_tests_mongodb_helm2:
    machine: true
    environment:
      KUBEAPPS_DB: "mongodb"
      HELM_VERSION: "v2.16.3"
    <<: *local_e2e_steps
  local_e2e_tests_postgresql_helm2:
    machine: true
    environment:
      HELM_VERSION: "v2.16.3"
      KUBEAPPS_DB: "postgresql"
    <<: *local_e2e_steps
  local_e2e_tests_mongodb_helm3:
    machine: true
    environment:
      HELM_VERSION: "v3.0.2"
      KUBEAPPS_DB: "mongodb"
    <<: *local_e2e_steps
  local_e2e_tests_postgresql_helm3:
    machine: true
    environment:
      HELM_VERSION: "v3.0.2"
      KUBEAPPS_DB: "postgresql"
      TEST_UPGRADE: "1"
    <<: *local_e2e_steps
  GKE_1_15_MASTER:
    <<: *gke_test
    environment:
      HELM_VERSION: "v3.0.2"
      GKE_BRANCH: "1.15"
      KUBEAPPS_DB: "postgresql"
  GKE_1_15_LATEST_RELEASE:
    <<: *gke_test
    environment:
      HELM_VERSION: "v3.0.2"
      GKE_BRANCH: "1.15"
      KUBEAPPS_DB: "postgresql"
      TEST_LATEST_RELEASE: 1
  GKE_1_14_MASTER:
    <<: *gke_test
    environment:
      HELM_VERSION: "v3.0.2"
      GKE_BRANCH: "1.14"
      KUBEAPPS_DB: "postgresql"
  GKE_1_14_LATEST_RELEASE:
    <<: *gke_test
    environment:
      HELM_VERSION: "v3.0.2"
      GKE_BRANCH: "1.14"
      KUBEAPPS_DB: "postgresql"
      TEST_LATEST_RELEASE: 1
  sync_chart:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cc:ed:2d:1f:74:3b:32:c3:99:62:d7:7d:81:af:01:e0"
      - run: |
          if ls ~/.ssh/id_rsa_* 1> /dev/null 2>&1; then
            # Change order to use configured ssh_key first
            ssh-add -D
            ssh-add ~/.ssh/id_rsa_* ~/.ssh/id_rsa
          fi
          ./script/chart_sync.sh kubernetes-bitnami kubernetes@bitnami.com
  push_images:
    docker:
      - image: circleci/golang:1.13
    steps:
      - setup_remote_docker
      - <<: *exports
      - run: |
          if [[ -z "$CIRCLE_PULL_REQUEST" && -n "$DOCKER_USERNAME" && -n "$DOCKER_PASSWORD" ]]; then
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            for IMAGE in kubeapps/apprepository-controller kubeapps/dashboard kubeapps/tiller-proxy kubeapps/asset-syncer kubeapps/assetsvc kubeapps/kubeops; do
              docker pull ${IMAGE}${IMG_MODIFIER}:${DEV_TAG}
              docker tag ${IMAGE}${IMG_MODIFIER}:${DEV_TAG} ${IMAGE}:${PROD_TAG}
              docker push ${IMAGE}:${PROD_TAG}
            done
          fi
